name: Nuclei Security Scanning

on:
  schedule:
    - cron: '0 */3 * * *'  # Run every 3 hours
  workflow_dispatch:  # Allow manual trigger

jobs:
  nuclei-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      contents: write  # Required to commit and push results
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          pip install requests
      
      - name: Create directories
        run: |
          mkdir -p results_n
          mkdir -p state
          mkdir -p /tmp/tools
      
      - name: Download and install Nuclei
        run: |
          cd /tmp/tools
          wget -q https://github.com/projectdiscovery/nuclei/releases/download/v3.4.10/nuclei_3.4.10_linux_amd64.zip
          unzip -q nuclei_3.4.10_linux_amd64.zip
          sudo mv nuclei /usr/local/bin/
          sudo chmod +x /usr/local/bin/nuclei
          nuclei -version
      
      - name: Download and install Subfinder
        run: |
          cd /tmp/tools
          wget -q https://github.com/projectdiscovery/subfinder/releases/download/v2.9.0/subfinder_2.9.0_linux_amd64.zip
          unzip -q subfinder_2.9.0_linux_amd64.zip
          sudo mv subfinder /usr/local/bin/
          sudo chmod +x /usr/local/bin/subfinder
          subfinder -version
      
      - name: Download and install Httpx
        run: |
          cd /tmp/tools
          wget -q https://github.com/projectdiscovery/httpx/releases/download/v1.6.9/httpx_1.6.9_linux_amd64.zip
          unzip -q httpx_1.6.9_linux_amd64.zip
          sudo mv httpx /usr/local/bin/
          sudo chmod +x /usr/local/bin/httpx
          httpx -version
      
      - name: Update Nuclei templates
        run: |
          nuclei -update-templates
      
      - name: Restore previous state
        continue-on-error: true
        run: |
          git fetch origin main
          git checkout origin/main -- state/nuclei_state.json 2>/dev/null || true
      
      - name: Fetch bounty programs
        run: |
          python3 .github/fetch_bounty_programs.py bounty_programs.json
      
      - name: Run Nuclei scan
        run: |
          python3 .github/nuclei_scan.py bounty_programs.json
      
      - name: Commit and push results
        run: |
          git config user.name "Nuclei Scan Bot"
          git config user.email "action@github.com"
          
          git add results_n/ state/nuclei_state.json
          
          DATE=$(date +%Y-%m-%d_%H-%M-%S)
          git diff --cached --quiet || git commit -m "Nuclei scan results - $DATE"
          
          # Push with enhanced retry logic
          MAX_RETRIES=10
          RETRY_DELAY=15
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Push attempt $i of $MAX_RETRIES"
            
            if git push origin main; then
              echo "Successfully pushed changes"
              break
            else
              if [ $i -eq $MAX_RETRIES ]; then
                echo "Failed to push after $MAX_RETRIES attempts"
                exit 1
              fi
              
              echo "Push failed, retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
              
              # Fetch and pull with rebase before retrying
              echo "Fetching latest changes..."
              git fetch origin main
              
              echo "Pulling latest changes with rebase..."
              if git pull --rebase origin main; then
                echo "Rebase successful"
              else
                echo "Rebase failed, attempting to resolve conflicts..."
                
                # If rebase fails, abort and try merge with auto-resolution
                git rebase --abort 2>/dev/null || true
                
                # Fetch again and merge with strategy
                git fetch origin main
                
                # Try merge with automatic conflict resolution
                if git merge origin/main -m "Auto-merge from nuclei scan workflow"; then
                  echo "Merge successful"
                else
                  echo "Merge has conflicts, attempting auto-resolution..."
                  
                  # For results_n/ directory, keep our changes (latest scan results)
                  git checkout --ours results_n/ 2>/dev/null || true
                  git add results_n/ 2>/dev/null || true
                  
                  # For state files, keep ours (most recent run state)
                  git checkout --ours state/nuclei_state.json 2>/dev/null || true
                  git add state/nuclei_state.json 2>/dev/null || true
                  
                  # For other files, accept theirs
                  if git status --porcelain | grep -qE "^[UAD][UAD] "; then
                    git status --porcelain | grep "^[UAD][UAD]" | awk '{print $2}' | while read file; do
                      if [[ "$file" != results_n/* ]] && [[ "$file" != "state/nuclei_state.json" ]]; then
                        git checkout --theirs "$file" 2>/dev/null || true
                        git add "$file" 2>/dev/null || true
                      fi
                    done
                  fi
                  
                  # Complete the merge if we resolved conflicts
                  if [ -z "$(git status --porcelain | grep '^[UAD][UAD]')" ]; then
                    echo "All conflicts resolved, committing merge"
                    if git commit --no-edit 2>/dev/null; then
                      echo "Merge committed successfully"
                    elif git commit -m "Auto-resolve conflicts in nuclei scan workflow" 2>/dev/null; then
                      echo "Merge committed with custom message"
                    else
                      echo "Error: Failed to commit merge"
                    fi
                  else
                    echo "Warning: Some conflicts remain unresolved"
                    git status --porcelain
                  fi
                fi
              fi
              
              # Increase delay for next retry
              RETRY_DELAY=$((RETRY_DELAY + 5))
            fi
          done
      
      - name: Generate summary
        run: |
          echo "Nuclei Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "Date: $(date +%Y-%m-%d)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if command -v jq &> /dev/null; then
            # Count total findings
            TOTAL_FINDINGS=$(find results_n -name "*.json" -type f -exec jq -r '.findings_count // 0' {} \; 2>/dev/null | awk '{s+=$1} END {print s+0}')
            TOTAL_SCANS=$(find results_n -name "*.json" -type f | wc -l)
            
            echo "Total Scans: $TOTAL_SCANS" >> $GITHUB_STEP_SUMMARY
            echo "Total Findings: $TOTAL_FINDINGS" >> $GITHUB_STEP_SUMMARY
            
            # Get last scan info
            if [ -f "state/nuclei_state.json" ]; then
              SCANNED_COUNT=$(jq -r '.scanned_programs | length' state/nuclei_state.json 2>/dev/null || echo "0")
              echo "Programs Scanned: $SCANNED_COUNT" >> $GITHUB_STEP_SUMMARY
            fi
          fi
